name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  XCODE_VERSION: '15.4'
  IOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 15'
  SCHEME: 'RollCall'
  PROJECT: 'RollCall.xcodeproj'

jobs:
  lint:
    name: Lint & Format Check
    runs-on: macos-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        
      - name: Install SwiftLint
        run: brew install swiftlint
        
      - name: Install SwiftFormat
        run: brew install swiftformat
        
      - name: Run SwiftLint
        working-directory: RollCall
        run: |
          swiftlint lint --strict --reporter json > swiftlint.json || true
          if [ -s swiftlint.json ]; then
            violations=$(cat swiftlint.json | jq 'length')
            echo "SwiftLint violations: $violations"
            if [ "$violations" -gt 0 ]; then
              cat swiftlint.json | jq '.'
              echo "❌ SwiftLint found $violations violations"
              exit 1
            fi
          fi
          echo "✅ SwiftLint passed with 0 violations"
          
      - name: Run SwiftFormat Check
        working-directory: RollCall
        run: |
          swiftformat --lint . --quiet
          if [ $? -ne 0 ]; then
            echo "❌ SwiftFormat check failed"
            echo "Run 'swiftformat .' locally to fix formatting issues"
            exit 1
          fi
          echo "✅ SwiftFormat check passed"
          
      - name: Upload Lint Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: swiftlint.json

  build:
    name: Build & Test
    runs-on: macos-latest
    needs: lint
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        
      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Build for Testing
        working-directory: RollCall
        run: |
          set -o pipefail
          xcodebuild clean build-for-testing \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -sdk iphonesimulator \
            -destination "${{ env.IOS_DESTINATION }}" \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=YES \
            | xcpretty --color --test
            
      - name: Run Tests
        working-directory: RollCall
        run: |
          set -o pipefail
          xcodebuild test-without-building \
            -project "${{ env.PROJECT }}" \
            -scheme "${{ env.SCHEME }}" \
            -sdk iphonesimulator \
            -destination "${{ env.IOS_DESTINATION }}" \
            -derivedDataPath build \
            -resultBundlePath TestResults.xcresult \
            -test-timeouts-enabled YES \
            -maximum-test-execution-time-allowance 300 \
            | xcpretty --color --test --report junit
            
      - name: Generate Coverage Report
        working-directory: RollCall
        run: |
          cd build/Build/Products/Debug-iphonesimulator
          xcrun xccov view --report --json ../../../../TestResults.xcresult > coverage.json
          coverage=$(cat coverage.json | jq '.lineCoverage * 100' | cut -d. -f1)
          echo "Code coverage: ${coverage}%"
          echo "COVERAGE=${coverage}" >> $GITHUB_ENV
          
          # Fail if coverage is below MVP threshold (60%)
          if [ "$coverage" -lt 60 ]; then
            echo "❌ Code coverage ${coverage}% is below MVP threshold (60%)"
            exit 1
          fi
          echo "✅ Code coverage ${coverage}% meets MVP threshold"
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            TestResults.xcresult
            build/Build/Products/Debug-iphonesimulator/coverage.json
            
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: build/Build/Products/Debug-iphonesimulator/coverage.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  metrics:
    name: Collect CI Metrics
    runs-on: macos-latest
    needs: [lint, build]
    if: always()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Make Scripts Executable
        run: |
          chmod +x scripts/collect-metrics.sh
          chmod +x scripts/run-tests.sh
          
      - name: Collect Metrics
        run: |
          # Set build status based on previous job results
          if [ "${{ needs.build.result }}" == "success" ]; then
            BUILD_MAIN="green"
            BUILD_TESTS="green"
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            BUILD_MAIN="red"
            BUILD_TESTS="red"
          else
            BUILD_MAIN="yellow"
            BUILD_TESTS="yellow"
          fi
          
          # Get SwiftLint violations count
          if [ "${{ needs.lint.result }}" == "success" ]; then
            SWIFTLINT_COUNT=0
          else
            SWIFTLINT_COUNT=$(cat swiftlint.json 2>/dev/null | jq 'length' || echo "999")
          fi
          
          # Generate ci-metrics.json
          cat > ci-metrics.json <<EOF
          {
            "build_main": "$BUILD_MAIN",
            "build_tests": "$BUILD_TESTS",
            "coverage_percent": ${{ env.COVERAGE || 'null' }},
            "swiftlint_remaining": $SWIFTLINT_COUNT,
            "test_failures": []
          }
          EOF
          
          echo "CI Metrics:"
          cat ci-metrics.json | jq '.'
          
      - name: Upload CI Metrics
        uses: actions/upload-artifact@v4
        with:
          name: ci-metrics
          path: ci-metrics.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Run Dependency Audit
        run: |
          echo "✅ Dependency audit placeholder (implement with your dependency scanner)"
          
      - name: SAST Scan
        run: |
          echo "✅ SAST scan placeholder (implement with Semgrep/CodeQL)"

  deploy:
    name: Deploy to TestFlight
    runs-on: macos-latest
    needs: [lint, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        
      - name: Build for Release
        run: |
          echo "🚀 Building for TestFlight deployment"
          echo "Note: Add your provisioning profiles and certificates here"
          # xcodebuild archive ...
          # xcodebuild -exportArchive ...
          
      - name: Upload to TestFlight
        run: |
          echo "📱 Uploading to TestFlight"
          echo "Note: Configure with App Store Connect API key"
          # xcrun altool --upload-app ...
          
      - name: Upload dSYMs to Sentry
        run: |
          echo "🐛 Uploading dSYMs to Sentry"
          echo "Note: Configure with Sentry auth token"
          # sentry-cli upload-dif ...

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, build, security]
    if: always()
    
    steps:
      - name: Notify Success
        if: ${{ needs.lint.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "✅ CI Pipeline passed successfully!"
          
      - name: Notify Failure
        if: ${{ needs.lint.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
        run: |
          echo "❌ CI Pipeline failed!"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"